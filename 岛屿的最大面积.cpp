/*11.2020.3.15 岛屿的最大面积
给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)
示例 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。
示例 2:
[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。
注意: 给定的矩阵grid 的长度和宽度都不超过 50。*/ 
int dp(vector<vector<int>>& grid,int i,int j)//左,右，上，下
{
	if(i<0||i==grid.size())//必须放前面，否则会先越界
		return 0;
	else if(j<0||j==grid[i].size())
		return 0;
	if(grid[i][j]==1)
	{
		grid[i][j]=0;//访问过的置0，避免重复访问
		return 1+dp(grid,i,j-1 )+dp(grid,i,j+1 )+ dp(grid,i-1,j )+dp(grid,i+1,j );
	}	
	return 0;
}
 int maxAreaOfIsland(vector<vector<int>>& grid) 
 {
	 int m=0;
	 int temp=0;
	 for(int i=0;i<grid.size();i++)
	 {
		 for(int j=0;j<grid[i].size();j++)
		 {
			 if(grid[i][j]==1)
			 {
				 m=dp(grid,i,j);
				 temp=max(m,temp);
			 }
		 }
	 }
	 return temp;
 }
